ublic static int[] findMatch(int cap, int[][] foreList, int[][] backList){
		// sort backList in increasing order of memory usage
		Arrays.sort(backList, (a, b) -> a[1]-b[1]);
		// instantiate the result array
		int[][] res = new int[2][2];
		// for each app in foreList, find the best match thru binary search
		for(int[] curFore: foreList) {
			int[][] curPair = binarySearch(cap, curFore, backList);
			System.out.print("curPair is :" + curPair[0][1] + curPair[1][1] + " ");
			if(curPair[0][1]+curPair[1][1]>res[0][1]+res[1][1]) {
				res[0][1] = curPair[0][1];
				res[1][1] = curPair[1][1];
				
				res[0][0] = curPair[0][0];
				res[1][0] = curPair[1][0];
			}
		}
		return new int[]{res[0][0], res[1][0]};
	}
	
	public static int[][] binarySearch(int cap, int[] curFore, int[][] backList){
		// if the smallest sum exceeds the capacity
		if(curFore[1]+backList[0][1]> cap){
			return new int[2][2];
		}
		// if the largest sum still smaller than capacity	
		if(curFore[1]+backList[backList.length-1][1]<= cap){
			return new int[][]{curFore, backList[backList.length-1]};
		}
		int l = 0, r = backList.length-1, ans = -1;
		while(l<=r) {
			int mid = l+ (r-l)/2;
			System.out.println("l, mid, r: " + l + " " + mid + " " + r);
			if(curFore[1]+backList[mid][1]<= cap){
				ans = l;
				l = mid+1;
			} else if (curFore[1]+backList[mid][1]> cap){
				r = mid-1;
			}
		}
		return new int[][]{curFore, backList[ans]};
	}
	public static void main(String args[]) {
		// example
		int cap = 10;
		int[][] foreList = new int[][]{{1, 2}, {2, 5}, {3, 8}};
		int[][] backList = new int[][]{{1, 4}, {2, 2}, {3, 7}};
		int[] res = findMatch(cap, foreList, backList);
		System.out.println("the ids are: " + res[0] + ", "+ res[1]);
	}
