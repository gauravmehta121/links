static String HI = String.valueOf((char)(127)); // STRING MAX
    static String LO = "";  // STRING MIN
    static int kthPrice;
    static String cur; // it is always the answer to the pending view query
    static TreeMap<Integer, TreeSet<String>> map = new TreeMap<>(Map.of(Integer.MAX_VALUE, new TreeSet<>(Set.of(LO))));

    static private void insert(String name, int price){
        if (map.size() == 1){ // initialization
            kthPrice = price;
            cur = HI;
        }
        map.computeIfAbsent(price, o -> new TreeSet<>()).add(name);

        if (price == kthPrice && name.compareTo(cur) < 0 || price < kthPrice){
            cur = map.get(kthPrice).lower(cur); // get the lower string when a lower item is inserted.
        }
        if (cur == null){ // if it reaches the bottom, get the lower string from the end of the lower price.
            kthPrice = map.lowerKey(kthPrice);
            cur = map.get(kthPrice).last();
        }
    }

    static private String view(){
        String ans = cur;
        cur = map.get(kthPrice).higher(cur); // go to higher string
        if (cur == null){ // if none, then go to the lowest string of next price
            kthPrice = map.higherKey(kthPrice);
            cur = map.get(kthPrice).first();
        }
        return ans;
    }
