private static int findNumWaysToSplit(String categories, int k) {
        Map<Character, Integer> charToFreq = new HashMap<>();
        for (char c : categories.toCharArray()) {
            charToFreq.put(c, charToFreq.getOrDefault(c, 0) + 1);
        }
        int n = categories.length();
        Map<Character, Integer> prefixMapItems = new HashMap<>();
        int numWaysToSplit = 0;
        int numSharedChar = 0;
        for (int i = 0; i < n; i++) {
            char currChar = categories.charAt(i);
            int freqLeftSide = prefixMapItems.getOrDefault(currChar, 0) + 1;
            int freqRightSide = charToFreq.get(currChar) - freqLeftSide;
            if (freqLeftSide != 0 && freqRightSide != 0 && !prefixMapItems.containsKey(currChar)) {
                numSharedChar += 1;
            } else if (freqRightSide == 0) {
                numSharedChar -= 1;
            }
            if (numSharedChar > k) numWaysToSplit++;
            prefixMapItems.put(currChar, prefixMapItems.getOrDefault(currChar, 0) + 1);
        }
        return numWaysToSplit;
    }
