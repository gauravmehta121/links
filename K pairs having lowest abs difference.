static int[] solve(int[] A, int k){
        Arrays.sort(A);
        int lo = 0, hi = (int)1e8;
        while(lo < hi){ // find max bound 
            int mid = (lo+hi+1)>>1;
            long cnt = 0;
            for (int i = 0, j = 0; i < A.length; i++){
                while(A[i] - A[j] > mid){
                    ++j;
                }
                cnt += i - j;
            }
            if (cnt <= k){
                lo=mid;
            }else{
                hi=mid-1;
            }
        }
        int[] ans = new int[k];
        for (int i = 0, j = 0; i < A.length && k > 0; i++){ // fill it.
            while(A[i]-A[j]>lo){
                ++j;
            }
            for (int s = j; s < i && k > 0; s++){
                ans[--k]=A[i]-A[s];
            }
        }
        while(k>0){ // fill the remaining with lo+1.
            ans[--k]=lo+1;
        }
        Arrays.sort(ans); // sort before return the answer.
        return ans;
    }
